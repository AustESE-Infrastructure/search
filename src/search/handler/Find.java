/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package search.handler;
import calliope.core.constants.JSONKeys;
import java.io.File;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;
import search.JettyServer;
import search.exception.SearchException;
import java.util.HashMap;
/**
 * Find things in the indices generated by BuildIndex
 * @author desmond
 */
public class Find {
    static QueryParser parser;
    static int HITS_PER_PAGE = 20;
    static HashMap<String,IndexSearcher> searchers;
    // we need to let this time-consuming load to happen only once
    static void initIndexSearchers() throws Exception
    {
        searchers = new HashMap<String,IndexSearcher>();
        File indexDir = new File(JettyServer.indexRoot);
        File[] languageDirs = indexDir.listFiles();
        for ( int i=0;i<languageDirs.length;i++ )
        {
            IndexReader reader = DirectoryReader.open(
                FSDirectory.open(languageDirs[i]));
            IndexSearcher searcher = new IndexSearcher(reader);
            searchers.put( languageDirs[i].getName(), searcher );
        }
    }
    /**
     * Search for a query string in the index
     * @param line the query as text
     * @param language the language name of the index e.g. "english"
     * @param start the hit-number to start from
     * @return a JSON document containing the docids and vids of matching docs
     * @throws SearchException 
     */
    public String search( String line, String language, int start ) 
        throws SearchException
    {
        try
        {
            if ( searchers == null )
                initIndexSearchers();
            Analyzer analyzer = new StandardAnalyzer();
            parser = new QueryParser(JSONKeys.CONTENT, analyzer);
            Query query = parser.parse(line);
            StringBuilder sb = new StringBuilder();
            IndexSearcher searcher = searchers.get( language );
            if ( searcher != null )
            {
                TopDocs results = searcher.search(query, 5*HITS_PER_PAGE);
                ScoreDoc[] hits = results.scoreDocs;
                int numTotalHits = results.totalHits;
                int end = Math.min(numTotalHits, start+HITS_PER_PAGE);    
                sb.append("[ ");
                int nObjects = 0;
                for (int i = start; i< end; i++) 
                {
                    Document doc = searcher.doc(hits[i].doc);
                    String docid = doc.get("docid");
                    if ( docid != null )
                    {
                        if ( nObjects > 0 )
                            sb.append(",\n");
                        sb.append("{ ");
                        sb.append("\"docid\": \"");
                        sb.append(docid);
                        sb.append("\"");
                        String vid = doc.get("vid");
                        if (vid != null)
                        {
                            sb.append(", \"vid\": \"");
                            sb.append(vid);
                            sb.append("\"");
                        }
                        sb.append(" }");
                        nObjects++;
                    }
                }
                sb.append("] ");
                return sb.toString();
            }
            else
                throw new Exception("Unknown language "+language);
        }
        catch ( Exception e )
        {
            throw new SearchException(e);
        }
    }
}
